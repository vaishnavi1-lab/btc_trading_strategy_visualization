# -*- coding: utf-8 -*-
"""btc_trading_strategy_visualization.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1lLsD-GkSJXQ6pq3ETzXkBoDvfioqhipu
"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
import matplotlib.pyplot as plt

# Load data
data = pd.read_csv('data.csv')

# Preprocess data (assuming 'datetime' is a string column representing dates)
X = data.drop(['signal', 'datetime'], axis=1)  # Features
y = data['signal'].map({'buy': 0, 'sell': 1, 'none': 2}).astype(int)  # Target variable encoding

# Split data (optional for visualization)
# X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# No scaling required for visualization (assuming features are numerical)

# Ensure datetime is in the correct format (if needed for plotting)
data['datetime'] = pd.to_datetime(data['datetime'])

# Create the price chart
plt.figure(figsize=(10, 6))

# Define colors for buy and sell signals
buy_color = 'green'
sell_color = 'red'
no_action_color = 'gray'

# Plot price with markers
plt.plot(data['datetime'], data['close'],  label='Price')

# Add scatter plots for buy and sell signals
plt.scatter(data[data['signal'] == "buy"]["datetime"], data[data['signal'] == "buy"]["close"], marker='^', color='green', label='Buy')
plt.scatter(data[data['signal'] == "sell"]["datetime"], data[data['signal'] == "sell"]["close"], marker='v', color='red', label='Sell')

# Customize the plot
plt.title('BTC Close Price with Predicted Buy/Sell Signals')
plt.xlabel('Date')
plt.ylabel('BTC Close Price')
plt.legend()
plt.grid(True)
plt.xticks(rotation=45)
plt.tight_layout()

# Save the plot as an image (replace 'plot.png' with your desired filename)
plt.savefig('plot.png')

# Display the plot (optional)
plt.show()

import pandas as pd
import matplotlib.pyplot as plt

# Load data
data = pd.read_csv('data.csv')

# Ensure datetime is in the correct format
data['datetime'] = pd.to_datetime(data['datetime'])

# Generate or assign values to 'predicted_signal' based on your trading strategy
# Example: Assuming random assignment for demonstration purposes
import random
data['predicted_signal'] = [random.choice(['buy', 'sell', 'none']) for _ in range(len(data))]

# Plot BTC price with predicted signals
plt.figure(figsize=(14, 7))
plt.plot(data['datetime'], data['close'], label='BTC Close Price', color='skyblue', linewidth=2)

# Assuming 'predicted_signal' column contains buy, sell, or none signals
# Highlight buy signals
buy_signals = data[data['predicted_signal'] == 'buy']
plt.scatter(buy_signals['datetime'], buy_signals['close'], label='Buy Signal', marker='^', color='green', alpha=1, s=100)

# Highlight sell signals
sell_signals = data[data['predicted_signal'] == 'sell']
plt.scatter(sell_signals['datetime'], sell_signals['close'], label='Sell Signal', marker='v', color='red', alpha=1, s=100)

plt.title('BTC Price with Predicted Buy/Sell Signals')
plt.xlabel('Date')
plt.ylabel('BTC Close Price')
plt.legend()
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()